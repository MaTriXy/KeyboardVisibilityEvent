import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.30"
        classpath 'com.android.tools.build:gradle:4.1.2'
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.4.20'
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.13.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }

    tasks.withType(Javadoc) { failOnError false }

    plugins.withId("com.android.library") {
        extensions.getByName("android").compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    plugins.withId("com.android.application") {
        extensions.getByName("android").compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

String shell(String command) {
    def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
    if (proc.waitFor() != 0) {
        throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}")
    } else {
        def err = proc.err.text
        if (err) {
            System.err.println(err)
        }
    }
    return proc.in.text;
}

task releng {
    doLast {
        def tag = "v" + project.properties["VERSION_NAME"]
        println "Release engineering for ${tag}"

        def changes = shell "git status -s"
        if (changes.trim()) {
            throw new RuntimeException("There are changes not commited yet.\n${changes}")
        }

        println "> git tag ${tag}"
        shell "git tag ${tag}"
        println "> git push origin ${tag}"
        shell "git push origin ${tag}"
        shell "git push origin master"
    }
}

wrapper {
    gradleVersion = '6.8.2'
    distributionType = Wrapper.DistributionType.ALL
}
